from time import time
from base64 import b64decode
from signal_protocol import curve, address, identity_key, state, storage

DEVICE_ID = 1
DEV_ID = address.DeviceId(DEVICE_ID)


def test_define_prekey_bundle_under_prekey_exhaustion():
    alice_address = address.ProtocolAddress("+14151111111", DEVICE_ID)
    bob_address = address.ProtocolAddress("+14151111112", DEVICE_ID)

    alice_identity_key_pair = identity_key.IdentityKeyPair.generate()
    bob_identity_key_pair = identity_key.IdentityKeyPair.generate()

    alice_registration_id = 1  # TODO: generate these
    bob_registration_id = 2

    alice_store = storage.InMemSignalProtocolStore(
        alice_identity_key_pair, alice_registration_id
    )
    bob_store = storage.InMemSignalProtocolStore(
        bob_identity_key_pair, bob_registration_id
    )

    bob_pre_key_pair = curve.KeyPair.generate()
    bob_signed_pre_key_pair = curve.KeyPair.generate()

    bob_signed_pre_key_public = bob_signed_pre_key_pair.public_key().serialize()

    bob_signed_pre_key_signature = (
        bob_store.get_identity_key_pair()
        .private_key()
        .calculate_signature(bob_signed_pre_key_public)
    )

    pre_key_id = state.PreKeyId(31337)
    signed_pre_key_id = state.SignedPreKeyId(22)

    bob_pre_key_bundle = state.PreKeyBundle(
        bob_store.get_local_registration_id(),
        DEV_ID,
        None,
        signed_pre_key_id,
        bob_signed_pre_key_pair.public_key(),
        bob_signed_pre_key_signature,
        bob_store.get_identity_key_pair().identity_key(),
    )

    prekeyrecords = state.generate_n_prekeys(256, pre_key_id)
    assert len(prekeyrecords) == 256
    assert prekeyrecords[12].id() != prekeyrecords[13].id()
    assert prekeyrecords[14].key_pair() != prekeyrecords[15].key_pair()


def test_kem_record():
    # upstream protobuf
    record_data = "CCASoQwIypPJYdibebaJtSQDRJkchqKk6rnHLgYEV5heWBwSX3EGDlClaGg/zFess/wscsoY4MUu20WMvtJoSOZEEMwok4LMFLcpDhV3rnZkVCiomUuptNmdbcMwaJWcmMd6uWQR8EMqYcwBSwG13WAElQJSEagojis8ykvEGEwAACQ2rGeEcpcyeInIBVmRaPASa6WnuRUahYoDNOFUvXKuTTq2eEkHAfkSjgYl/oVr8ec43Mt+8NodBAs0XkdF0FKGxGC8Rhpgd4J5scVijvd5XCCeT9sbdsaxQdFeJnSMcMvOIYwZVaWqywlv4nGRrJPJYNyus3Bc+NcHusV5KQZJ1XU8MAEhrFq4IyEsrRwk6VrHyRYbR8CXz1BSCTYkoBkOXjCOHjmk+RLKHVwITrN1XlkjC1J1G/dfKtSLvpocXTi4bDwNh/rP/BOABCAo09e+Oash3WgTZjJL+Zq9MhSi2jJeGzqmeDBxtjYAOvVznxIdMeB1ekLGyBZ3dmoKVMgprgy7UvM4sMBI9PNujcE6SiXPECVJGiGZYklpeJihIOprKre0MdeYYxMbrUM/r2uoFNyMSuEvVwhwC3BqJoufzGLAvJjNwLvIi4Cq++Yze3rLU6XBsFCiPwDBpserpPqkWplgZkNscYCc7nFnR3snHuWvaWO+ePhxNCSnF/ZZQszGEWabC4dSPUAlVSYS68VQPpBQ90NRSnl17nR6mYZ+cuAYmDRvE7xc3ed3IeGzEKVS8ayE6ABZetQDBxd74XhNtgozj3vI2ocNmlAz3YoB9CxJznWr6/pTfBKiRYey9GCQGuJe72BsEMO/fWqMeyBh0nbE/3ZeGaswpPlByepfC3oCVOwDo9kGECFGo6HMr/xeLleEchPCoiwBuDeH4NEwtoPI72ypaLo+0Cx43ZURPpBdIHoU62xQDdNhOkvMQYSWEVlBhst2W7s8STqYnbzO9yonhyKIv5QmWbwxKdd0kVYFlCCrwaCXdDsKKUo8dgi0XTfK4MGj5SOzoQdxKaAjg+ZQQ4GTSGuKHhihSEbOjCZJ9UWgMlfHoqeguJFZ1gQTz2q3/AbKjvAXdlSa3VO+GmMju6Qn0ex5LvlqExLOE8FmowdHFojDDFWg7paobbHIMTp4APBOOSMCZQikZ4spSsuEJvNbZzEAMuKjc6dZMfgk+hzPa8JIlHc/Q6Jw8tWSo0uCcINnsbXCmloNUgUDnGFTG3xdnbWQlaCD+9ZZIrDH0cGNdhsV/DuR+eTKneIG8haiW1SU5Gwy01UK+1a6rxRuOdFgpFi6baWxejRKtRLO0oQ+XIUetec3ImQ7UnYCgPljj7Rz5dy4UeOod5Eh1nu/z/ZP9KhzpJsbwvQRjhQ7aMiLEaZZf3c2hHQCRfxYZgw+K0wz5AU+gxoFYMBINNsxTgF3mSdr36MIWPWriBWoXjGBl9FxJ9czu+qm4xkDBjcf7TcbpyJNHgK20UMs6NkGSjKLgPTOSwG6yNYWqlFjlWedU9C+wlQDPlYkm0oqTnBuSFkXBTkmwoSJQ2doMGJp+es2gHlpU+gj6sBq8cuVObwO5AKlHiqQT9kY2HRDnqMNzKgx5QNqCTdwgRMbkhzAXjAOfCy2CmYob7RGryI76PBq3tEGftFfJWErK/WPehMkRrFOmzk1gRxafiBsgbiik9ZvYyi+IXtyLYCo/xlW1EyeOZNCvEfNdGsJpko5iXsg4hq5fQIur/uVQ4SQNfEl8kwSUhs8bCjNAKSVANeZ5ye2gFZjekExRwwj9wzBp1lZ8sUJOYpM+8Ou1bk+bhenald+g1M97Buv8cjESykTEDoOogPHiBEY4zwFF0A4GDgKj8t4HdO3DQQ5qlOrREa0NkeBwLfCgINpf2ijCsJf2RzM7PKukrRzfpepTjQljzuZPiGztGGWqCYf/BMb3wF6S5VU9BlYQqGWVIrEltOI3IlmLtV5TRdqNBA5BAOP21oCxgQEUYkPGOXFzTahg2VM9LaGBDKimNg5/mwlDdxfh7IAKgoBDasFMvOUQvFS9uqdWzRRUeUqO2J31mwohMV4XLPgkjmgSqYRoBVrbfQMDaES3uvze1ETDZgbe7EStDoa4RgI/xjJLPBQEsNRM2VkSKsFqIQsAM1Xa4ei9UO9/2I4YzaC+CRFH5BBvnaFFEWesdSKQFVsLWITcUDC3SoqfWRQsIYjMQAsA6pAz4o2zRte42o9AaBMWlR7beIHuHhqmRE1VTRGSRSbOJt8LGk83tiuf7JIgIIy5qiQuEqi2qSFTdYpE9t76lRdcMF5RvZHqhu50Ke4rlcMqrqR5MUPPIkOBWmo1sY08Nezh6yrgMSrSxlQioOlVfYn9pu8OpFPnHp5sjpvg9yS3tN6v6mrPYpiDJMThCtbwaFzL5FileO/cMZqPtl3Qrd5q9cZ0GgvRCU3vJgvR/ZQA0Irp0I/zRmhktuMAtB35gFIdFZkTaqxLVGCZzgTNABdVMZgQNJJehm5FyS969aTPOcjsYKxWAguyPHIqsSFw0QPgTd0zqAy++iB37IkapGNMKQHsMInLHyTc1aE8ikKv5B26wot9WcFu0HI7nkuGOMUOed/4qYMrGsEAcplrhQPy2Z1LruPECNDYCK/a1Nwy2eHqaWbssNLqHg4uQGjEjd2ysDF15fDHfpf4mw6Y/KntcgrvBYOEKTA2ce5zAGHGqVkcdHOBeSOPSGJu6BZ46WcmLFVytpA0gBZmOLPNdcBZAHByPuZyNog8PJOnJsehlisHRDBGWwnovMNSOK1tSqRKltJ4NJtvexs8BtyQ7tJ42otvtSElLpXxEqe/PZiRmJQ4MOrzxerHsFF2DY85ABe00iy9UU/PwMfi1uCFafL8IzO0Iyl5oI5V+gnlBx7q3KwaNmS3Io7m4TPVZuDnuCN4DXAuhIYLdcUrGI6H+iQM9JsdOewc4Vd4Qgu7RS6dplFvtcr6qNH5sp7vuMqDhbAsXbEA+WG6enOEqw2OQYeC8sr1sWCduZ5m5q6NkN0nBYfISxDz6Q1pQNfdKNHP6Q3zIWTT0wkrTrLwIt7qGFJooR/0ylJj3EtEshuIttUB2VeLlqa4+ZiKxdb/aIoEGhUnsJWtBF99ZGdTQPL4nCKyMVo04RzcQeINoaDyIia0niB22DA4QHOGyiGrCtLitkwiNR0kxBJRqoqlNYEaEM8OeJTWko5QSaJ9wKKa+GxABkpuUSCLJtZ3bqgoTIno7eJbtSDzgxv/Nq6+9UAkTa6aVxM+mWJLMGSNSO+ZNa+p8kO+7ia4qcbcWtzz0enmKQ0yFKlpfs1M/KpcjaM7/KpR+cAM/HC84kuRSNQUQW4YUI6hvfEr9K77mqVW9LD37WjMkGL8EM87bNLADhxlLEBAMoe20XGYDA5FKLE7CkddzGgMUKsOYolrSC9jfdmIymyibd4vri/SDNpbcmGYoSkQ5NK+xh+pum0AwRP7pzOsDNE6AyMQgw5jDXAezo7imdiQFnCb6ekNvOTvLqjKlzBEykvHcdrW9xPvpeFD3WYo7YfAkgTntQWqYZCvoaaJdtdFpWXXDcf02x1eeEZsSoumGpJRkeMhnFyddVul+iWJ4pb1FAblPEXdlEBFGmFRlwzgPq8pTgpRuSjhRFI6urEAENJfgHJ/4wMMQcPTANUcZCDUVSEIIyHh4SxEzRGvKyiCrok2xCRANatyHQ4e2ctmhoTAyi/reezUuqnJ2hRQfyeQuDNwAZvDxmvstUVfpwofJIKcbV06Hsanfw5lWJrK7HIiSFcIzSqa4yn44gzc0he3BW3uQcC5rOQuvebtVtdXcad8qZ94wVlpPtON9WwBHqS73G1YmPHwxC/NTtXZBoO1DFbWZJwE0PIk8nAV6c95zKwiVFK+vdFPaNKkQq/A8w0tOiKfqnNgQS2kcclrkEIzeK9pDh+qESbEcKcmNLAZytIZ8U0U2c0kKa0fXMc98yTPVyP38sugXlFWsNzT5day8kgBbBe7/yo2NF83sA1M7NK6lOwtiyDuIQT+0k7cOSPiQZRZgCghwRnX7KFM/xwvCOQxkjORAOriohrRyZP3WaByxHEYIbK/hQQo6YZFcWmHUUKl5qy+BS/tcBH+yl9y/Y7UCHIloXJgRtydXxIdnhlSHon09ZhguGINjcJbYtj2FXOemDPypPJYdibebaJtSQDRJkchqKk6rnHLgYEV5heWBwSX3EGDlClaGg/zFess/wscsoY4MUu20WMvtJoSOZEEMwok4LMFLcpDhV3rnZkVCiomUuptNmdbcMwaJWcmMd6uWQR8EMqYcwBSwG13WAElQJSEagojis8ykvEGEwAACQ2rGeEcpcyeInIBVmRaPASa6WnuRUahYoDNOFUvXKuTTq2eEkHAfkSjgYl/oVr8ec43Mt+8NodBAs0XkdF0FKGxGC8Rhpgd4J5scVijvd5XCCeT9sbdsaxQdFeJnSMcMvOIYwZVaWqywlv4nGRrJPJYNyus3Bc+NcHusV5KQZJ1XU8MAEhrFq4IyEsrRwk6VrHyRYbR8CXz1BSCTYkoBkOXjCOHjmk+RLKHVwITrN1XlkjC1J1G/dfKtSLvpocXTi4bDwNh/rP/BOABCAo09e+Oash3WgTZjJL+Zq9MhSi2jJeGzqmeDBxtjYAOvVznxIdMeB1ekLGyBZ3dmoKVMgprgy7UvM4sMBI9PNujcE6SiXPECVJGiGZYklpeJihIOprKre0MdeYYxMbrUM/r2uoFNyMSuEvVwhwC3BqJoufzGLAvJjNwLvIi4Cq++Yze3rLU6XBsFCiPwDBpserpPqkWplgZkNscYCc7nFnR3snHuWvaWO+ePhxNCSnF/ZZQszGEWabC4dSPUAlVSYS68VQPpBQ90NRSnl17nR6mYZ+cuAYmDRvE7xc3ed3IeGzEKVS8ayE6ABZetQDBxd74XhNtgozj3vI2ocNmlAz3YoB9CxJznWr6/pTfBKiRYey9GCQGuJe72BsEMO/fWqMeyBh0nbE/3ZeGaswpPlByepfC3oCVOwDo9kGECFGo6HMr/xeLleEchPCoiwBuDeH4NEwtoPI72ypaLo+0Cx43ZURPpBdIHoU62xQDdNhOkvMQYSWEVlBhst2W7s8STqYnbzO9yonhyKIv5QmWbwxKdd0kVYFlCCrwaCXdDsKKUo8dgi0XTfK4MGj5SOzoQdxKaAjg+ZQQ4GTSGuKHhihSEbOjCZJ9UWgMlfHoqeguJFZ1gQTz2q3/AbKjvAXdlSa3VO+GmMju6Qn0ex5LvlqExLOE8FmowdHFojDDFWg7paobbHIMTp4APBOOSMCZQikZ4spSsuEJvNbZzEAMuKjc6dZMfgk+hzPa8JIlHc/Q6Jw8tWSo0uCcINnsbXCmloNUgUDnGFTG3xdnbWQlaCD+9ZZIrDH0cGNdhsV/DuR+eTKneIG8haiW1SU5Gwy01UK+1a6rxRuOdFgpFi6baWxejRKtRLO0oQ+XIUetec3ImQ7UnYCgPljj7Rz5dy4UeOod5Eh1nu/z/ZP9KhzpJsbwvQRjhQ7aMiLEaZZf3c2hHQCRfxYZgw+K0wz5AU+gxoFYMBINNsxTgF3mSdr36MIWPWriBWoXjGBl9FxJ9czu+qm4xkDBjcf7TcbpyJNHgK20UMs6NkGSjKLgPTOSwG6yNYWqlFjlWedU9C+wlQDPlYkm0oqTnBuSFkXBTkmwoSJQ2doMGJp+es2gHlpU+gj6sBq8cuVObwO5AKlHiqQT9kY2HRDnqMNzKgx5QNqCTdwgRMbkhzAXjAOfCy2CmYob7RGryI76PBq3tEGftFfJWErK/WPehMkRrFOmzk1gRxafiBsgbiik9ZvYyi+IXtyLYCo/xlW1EyeOZNCvEfNdGsJpko5iXsg4hq5fQIur/uVQ4SQNfEl8kwSUhs8bCjNAKSVANeZ5ye2gFZjekExRwwj9wzBp1lZ8sUJOYpM+8Ou1bk+bhenald+g1M97Buv8cjESykTEDoOogPHiBEY4zwFF0A4GDgKj8t4HdO3DQQ5qlOrREa0NkeBwLfCgINpf2ijCsJf2RzM7PKukrRzfpepTjQljzuZPiGztGGWqCYf/BMb3wF6S5VU9BlYQqGWVIrEltOI3IlmLtV5TRdqNBA5BAOP21oCxgQEUYkPGOXFzTahg2VM9LaGBDKimNg5/mwlDdxfh7IAKgoBDasFMvOUQvFS9uqdWzRRUeUqO2J31mwohMV4XLPgkjmgSqYRoBVrbfQMDaES3uvze1ETDZgbe7EStDrDzha3vc3ckZC2ajceBGI3GhGlbHLhO9esI+1U+EM4FJynm7/rNnUEY5EMll4sXz9SubpT12tRrLZbNIiKJ02/IkBGkgNtSLdc5NALrV6UXAuSDtRQjF3O0Qeve6dU7+frKxS4qDdhYFRS8xObshbDWMLsFwXEOCun9TC7+8sdGngLKT25FGcAAAAA"

    kyber_record = state.KyberPreKeyRecord.deserialize(b64decode(record_data.encode()))
    assert kyber_record.id().get_id() == 32

    new_record = state.KyberPreKeyRecord(
        kyber_record.id(),
        int(time()),
        kyber_record.key_pair(),
        kyber_record.signature(),
    )

    assert new_record.id().get_id() == kyber_record.id().get_id()
    assert new_record.public_key().serialize() == kyber_record.public_key().serialize()
    assert new_record.secret_key().serialize() == kyber_record.secret_key().serialize()
    assert new_record.signature() == kyber_record.signature()
