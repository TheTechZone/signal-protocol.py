class Aes256Ctr32:
    ...

    def __init__(self, key: bytes, nonce: bytes, init_ctr: int) -> None:
        ...

    def process(self, data: bytes) -> bytes:
        """Applies the resulting stream to the input data. Update the internal state."""
        ...

class Aes256GcmDecryption:
    ...

    def __init__(self, key: bytes, nonce: bytes, associated_data: bytes) -> None:
        ...

    def decrypt_and_verify(self, ctxt: bytes, tag: bytes) -> bytes:
        ...

class Aes256GcmEncryption:
    ...

    def __init__(self, key: bytes, nonce: bytes, associated_data: bytes) -> None:
        ...

    def encrypt_and_tag(self, ptxt: bytes) -> tuple[bytes, bytes]:
        ...

class CryptographicHash:
    ...

    def __init__(self, algo: str) -> None:
        ...

    def update(self, data: bytes):
        ...

    def finalize(self) -> bytes:
        ...

class CryptographicMac:
    ...

    def __init__(self, algo: str) -> None:
        ...

    def update(self, data: bytes) -> None:
        ...

    def update_and_get(self, data: bytes) -> CryptographicMac:
        ...

    def finalize(self) -> bytes:
        ...

def aes_256_cbc_decrypt(ptxt: bytes, key: bytes, nonce: bytes) -> bytes:
    ...

def aes_256_cbc_encrypt(ptxt: bytes, key: bytes, nonce: bytes) -> bytes:
    ...

def aes_256_gcm_decrypt(ptxt: bytes, key: bytes, nonce: bytes, header: bytes) -> tuple[bytes, bytes]:
    ...

def aes_256_gcm_encrypt(ctxt: bytes, tag: bytes, key: bytes, nonce: bytes, header: bytes) -> bytes:
    ...